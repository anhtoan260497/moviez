{"ast":null,"code":"var _jsxFileName = \"/Users/rengarrrrr/Desktop/Studies/movie/src/features/Search/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport searchAPI from \"../../api/searchAPI\"; // import { changeSearch } from \"../Slice/searchSlice\";\n\nimport SearchContent from \"./components/SearchContent\";\nimport SearchFilter from \"./components/SearchFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSearch.propTypes = {};\n\nfunction Search(props) {\n  _s();\n\n  const location = useLocation(); // get params\n\n  const keyword = useSelector(state => state.search.submit); // keyword to search\n\n  const dispatch = useDispatch();\n  const API_Key = process.env.REACT_APP_MOVIE_API;\n  const [searchData, setSearchData] = useState();\n  const [searchFilter, setSearchFilter] = useState();\n  const [typeOfFilm, setTypeOfFilm] = useState();\n  const [selectType, setSelectType] = useState();\n  const [page, setPage] = useState(1); // useEffect(() => {\n  //   if (!location) return;\n  //           ;// get query string, path is ?query='querystring', first 7 letters need to slice\n  //   const action = changeSearch(params)\n  //   dispatch(action)\n  // }, [location,dispatch]); // add keyword\n\n  useEffect(() => {\n    if (!keyword) return;\n\n    const fetchSearchData = async () => {\n      const data = await searchAPI.getSearchData(API_Key, keyword, page);\n\n      if (!selectType) {\n        const newData = data.data.results.filter(item => item.media_type === \"tv\" || item.media_type === \"movie\");\n        setSearchData(newData);\n        setSearchFilter(newData);\n      }\n\n      if (selectType && selectType !== \"all\") {\n        const newData = data.data.results.filter(item => item.media_type === selectType);\n        setSearchFilter(newData);\n      }\n\n      if (selectType === \"all\") {\n        const newData = data.data.results.filter(item => item.media_type === \"tv\" || item.media_type === \"movie\");\n        setSearchFilter(newData);\n      }\n    };\n\n    fetchSearchData();\n  }, [keyword, API_Key, selectType, page]); // add data\n\n  useEffect(() => {\n    if (!searchData) return;\n    const typesSet = {};\n\n    for (let i = 0; i < searchData.length; i++) {\n      if (searchData[i].media_type in typesSet) {\n        typesSet[searchData[i].media_type] += 1;\n      } else {\n        typesSet[searchData[i].media_type] = 1;\n      }\n    }\n\n    setTypeOfFilm(typesSet);\n  }, [searchData]); // get all types\n\n  const handleSelectType = value => {\n    setSelectType(value);\n  }; // set type\n\n\n  const handlePagination = e => {\n    setTimeout(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    }, 700);\n    let currentPage = page;\n\n    if (e.target.value === \"backward\") {\n      currentPage -= 1;\n      if (currentPage < 1) return;\n      setPage(currentPage);\n    }\n\n    if (e.target.value === \"forward\") {\n      if ((searchData === null || searchData === void 0 ? void 0 : searchData.length) === 0) return;\n      setPage(page + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"search-container\",\n    style: {\n      width: \"90%\",\n      margin: \"0 5%\",\n      paddingTop: \"2rem\",\n      position: \"relative\",\n      top: \"4rem\",\n      zIndex: 1,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      gap: \"2rem\",\n      fontFamily: \"Source Sans Pro\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(SearchFilter, {\n      typeOfFilm: typeOfFilm,\n      total: searchData === null || searchData === void 0 ? void 0 : searchData.length,\n      handleSelectType: handleSelectType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchContent, {\n      searchData: searchFilter,\n      page: page,\n      handlePagination: handlePagination\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"21Xkl3AEQ3rYcAgGK+PiaJ50p+g=\", false, function () {\n  return [useLocation, useSelector, useDispatch];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/rengarrrrr/Desktop/Studies/movie/src/features/Search/index.jsx"],"names":["React","useEffect","useState","useSelector","useDispatch","useLocation","searchAPI","SearchContent","SearchFilter","Search","propTypes","props","location","keyword","state","search","submit","dispatch","API_Key","process","env","REACT_APP_MOVIE_API","searchData","setSearchData","searchFilter","setSearchFilter","typeOfFilm","setTypeOfFilm","selectType","setSelectType","page","setPage","fetchSearchData","data","getSearchData","newData","results","filter","item","media_type","typesSet","i","length","handleSelectType","value","handlePagination","e","setTimeout","window","scrollTo","top","behavior","currentPage","target","width","margin","paddingTop","position","zIndex","display","justifyContent","gap","fontFamily"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport searchAPI from \"../../api/searchAPI\";\n// import { changeSearch } from \"../Slice/searchSlice\";\nimport SearchContent from \"./components/SearchContent\";\nimport SearchFilter from \"./components/SearchFilter\";\n\nSearch.propTypes = {};\n\nfunction Search(props) {\n  const location = useLocation(); // get params\n  const keyword = useSelector(state => state.search.submit)// keyword to search\n\n  const dispatch = useDispatch()\n  \n  const API_Key = process.env.REACT_APP_MOVIE_API;\n\n  const [searchData, setSearchData] = useState();\n  const [searchFilter, setSearchFilter] = useState();\n\n  const [typeOfFilm, setTypeOfFilm] = useState();\n  const [selectType, setSelectType] = useState();\n\n  const [page, setPage] = useState(1);\n\n  // useEffect(() => {\n  //   if (!location) return;\n  //           ;// get query string, path is ?query='querystring', first 7 letters need to slice\n  //   const action = changeSearch(params)\n  //   dispatch(action)\n  // }, [location,dispatch]); // add keyword\n\n  useEffect(() => {\n    if (!keyword) return;\n    const fetchSearchData = async () => {\n      const data = await searchAPI.getSearchData(API_Key, keyword,page);\n      if (!selectType) {\n        const newData = data.data.results.filter(\n          (item) => item.media_type === \"tv\" || item.media_type === \"movie\"\n        );\n        setSearchData(newData);\n        setSearchFilter(newData);\n      }\n      if (selectType && selectType !== \"all\") {\n        const newData = data.data.results.filter(\n          (item) => item.media_type === selectType\n        );\n        setSearchFilter(newData);\n      }\n\n      if (selectType === \"all\") {\n        const newData = data.data.results.filter(\n          (item) => item.media_type === \"tv\" || item.media_type === \"movie\"\n        );\n        setSearchFilter(newData);\n      }\n    };\n    fetchSearchData();\n  }, [keyword, API_Key, selectType,page]); // add data\n\n  useEffect(() => {\n    if (!searchData) return;\n    const typesSet = {};\n    for (let i = 0; i < searchData.length; i++) {\n      if (searchData[i].media_type in typesSet) {\n        typesSet[searchData[i].media_type] += 1;\n      } else {\n        typesSet[searchData[i].media_type] = 1;\n      }\n    }\n\n    setTypeOfFilm(typesSet);\n  }, [searchData]); // get all types\n\n  const handleSelectType = (value) => {\n    setSelectType(value);\n  }; // set type\n\n  const handlePagination = (e) => {\n    setTimeout(()=> {\n      window.scrollTo({\n        top : 0,\n        behavior:'smooth'\n      })\n    },700)\n    let currentPage = page;\n    if (e.target.value === \"backward\") {\n      currentPage -= 1;\n      if (currentPage < 1) return;\n      setPage(currentPage);\n    }\n    if (e.target.value === \"forward\") {\n      if(searchData?.length === 0) return\n      setPage(page + 1);\n    }\n  }\n\n  return (\n    <section\n      className=\"search-container\"\n      style={{\n        width: \"90%\",\n        margin: \"0 5%\",\n        paddingTop: \"2rem\",\n        position: \"relative\",\n        top: \"4rem\",\n        zIndex: 1,\n\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        gap: \"2rem\",\n        fontFamily: \"Source Sans Pro\",\n      }}\n    >\n      <SearchFilter\n        typeOfFilm={typeOfFilm}\n        total={searchData?.length}\n        handleSelectType={handleSelectType}\n      />\n      <SearchContent searchData={searchFilter} page={page} handlePagination={handlePagination}/>\n    </section>\n  );\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}
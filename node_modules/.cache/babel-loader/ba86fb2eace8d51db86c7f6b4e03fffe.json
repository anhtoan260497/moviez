{"ast":null,"code":"var _jsxFileName = \"/Users/rengarrrrr/Desktop/Studies/movie/src/features/FilmInfo/components/FilmDetail/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.scss\";\nimport FilmCast from \"../FilmCast\";\nimport FilmFact from \"../FilmFact\";\nimport { useLocation } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport tvAPI from \"../../../../api/tvAPI\";\nimport movieAPI from \"../../../../api/movieAPI\";\nimport FilmRecommend from \"../FilmRecommend\";\nimport { useDispatch } from \"react-redux\";\nimport { changeFilmType } from \"../../../Slice/filmTypeSlice\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFilmDetail.propTypes = {};\n\nfunction FilmDetail(props) {\n  _s();\n\n  const API_Key = process.env.REACT_APP_MOVIE_API;\n  const location = useLocation();\n  const type = useSelector(state => state.filmType);\n  const dispatch = useDispatch();\n  const id = type === \"tv\" ? location.pathname.slice(4) : location.pathname.slice(7);\n  const [castData, setCastData] = useState();\n  const [filmData, setFilmData] = useState();\n  const [filmRecommend, setfilmRecommend] = useState();\n  const [externalIdData, setExternalIdData] = useState();\n  useEffect(() => {\n    const type = location.pathname.slice(1, 3);\n    const action = changeFilmType(type);\n    dispatch(action);\n  }, [location.pathname, dispatch]);\n  useEffect(() => {\n    if (!id || !type) return;\n\n    const fetchCastData = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvCast(API_Key, id);\n        const newData = [];\n\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.cast[i]);\n        }\n\n        setCastData(newData);\n      }\n\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieCast(API_Key, id);\n        const newData = [];\n\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.cast[i]);\n        }\n\n        setCastData(newData);\n      }\n    };\n\n    fetchCastData();\n  }, [id, type, API_Key]);\n  useEffect(() => {\n    if (!id || !type) return;\n\n    const fetchFilmExternalId = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvExternalId(API_Key, id);\n        setExternalIdData(data.data);\n      }\n\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieExternalId(API_Key, id);\n        setExternalIdData(data.data);\n      }\n    };\n\n    fetchFilmExternalId();\n  }, [id, type, API_Key]);\n  useEffect(() => {\n    if (!id || !type) return;\n\n    const fetchFilmData = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvInfo(API_Key, id);\n        setFilmData(data.data);\n      }\n\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieInfo(API_Key, id);\n        setFilmData(data === null || data === void 0 ? void 0 : data.data);\n      }\n    };\n\n    fetchFilmData();\n  }, [id, type, API_Key]);\n  useEffect(() => {\n    if (!id || !type) return;\n\n    const fetchRecommend = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvRecommend(API_Key, id);\n        let newData = [];\n\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.results[i]);\n        }\n\n        setfilmRecommend(newData);\n      }\n\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieRecommend(API_Key, id);\n        let newData = [];\n\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.results[i]);\n        }\n\n        setfilmRecommend(newData);\n      }\n    };\n\n    fetchRecommend();\n  }, [id, type, API_Key]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"film-detail\",\n    children: [/*#__PURE__*/_jsxDEV(FilmCast, {\n      castData: castData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilmFact, {\n      type: type,\n      filmData: filmData,\n      externalIdData: externalIdData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilmRecommend, {\n      filmRecommend: filmRecommend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FilmDetail, \"juALoalzb38UWGxCzTyH35g7lxg=\", false, function () {\n  return [useLocation, useSelector, useDispatch];\n});\n\n_c = FilmDetail;\nexport default FilmDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilmDetail\");","map":{"version":3,"sources":["/Users/rengarrrrr/Desktop/Studies/movie/src/features/FilmInfo/components/FilmDetail/index.jsx"],"names":["React","useEffect","PropTypes","FilmCast","FilmFact","useLocation","useState","tvAPI","movieAPI","FilmRecommend","useDispatch","changeFilmType","useSelector","FilmDetail","propTypes","props","API_Key","process","env","REACT_APP_MOVIE_API","location","type","state","filmType","dispatch","id","pathname","slice","castData","setCastData","filmData","setFilmData","filmRecommend","setfilmRecommend","externalIdData","setExternalIdData","action","fetchCastData","data","getTvCast","newData","i","push","cast","getMovieCast","fetchFilmExternalId","getTvExternalId","getMovieExternalId","fetchFilmData","getTvInfo","getMovieInfo","fetchRecommend","getTvRecommend","results","getMovieRecommend"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.scss\";\nimport FilmCast from \"../FilmCast\";\nimport FilmFact from \"../FilmFact\";\nimport { useLocation } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport tvAPI from \"../../../../api/tvAPI\";\nimport movieAPI from \"../../../../api/movieAPI\";\nimport FilmRecommend from \"../FilmRecommend\";\nimport { useDispatch } from \"react-redux\";\nimport { changeFilmType } from \"../../../Slice/filmTypeSlice\";\nimport { useSelector } from \"react-redux\";\n\nFilmDetail.propTypes = {};\n\nfunction FilmDetail(props) {\n  const API_Key = process.env.REACT_APP_MOVIE_API;\n  const location = useLocation();\n\n  const type = useSelector((state) => state.filmType);\n\n  const dispatch = useDispatch();\n\n  const id =\n    type === \"tv\" ? location.pathname.slice(4) : location.pathname.slice(7);\n\n  const [castData, setCastData] = useState();\n\n  const [filmData, setFilmData] = useState();\n\n  const [filmRecommend, setfilmRecommend] = useState();\n\n  const [externalIdData, setExternalIdData] = useState();\n\n  useEffect(() => {\n    const type = location.pathname.slice(1, 3);\n    const action = changeFilmType(type);\n    dispatch(action);\n  }, [location.pathname, dispatch]);\n\n  useEffect(() => {\n    if (!id || !type) return;\n    const fetchCastData = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvCast(API_Key, id);\n        const newData = [];\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.cast[i]);\n        }\n        setCastData(newData);\n      }\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieCast(API_Key, id);\n        const newData = [];\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.cast[i]);\n        }\n        setCastData(newData);\n      }\n    };\n    fetchCastData();\n  }, [id, type, API_Key]);\n\n  useEffect(() => {\n    if (!id || !type) return;\n    const fetchFilmExternalId = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvExternalId(API_Key, id);\n        setExternalIdData(data.data);\n      }\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieExternalId(API_Key, id);\n        setExternalIdData(data.data);\n      }\n    };\n    fetchFilmExternalId();\n  }, [id, type, API_Key]);\n\n  useEffect(() => {\n    if (!id || !type) return;\n    const fetchFilmData = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvInfo(API_Key, id);\n        setFilmData(data.data);\n      }\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieInfo(API_Key, id);\n        setFilmData(data?.data);\n      }\n    };\n    fetchFilmData();\n  }, [id, type, API_Key]);\n\n  useEffect(() => {\n    if (!id || !type) return;\n    const fetchRecommend = async () => {\n      if (type === \"tv\") {\n        const data = await tvAPI.getTvRecommend(API_Key, id);\n        let newData = [];\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.results[i]);\n        }\n        setfilmRecommend(newData);\n      }\n      if (type === \"movie\") {\n        const data = await movieAPI.getMovieRecommend(API_Key, id);\n        let newData = [];\n        for (let i = 0; i < 10; i++) {\n          newData.push(data.data.results[i]);\n        }\n\n        setfilmRecommend(newData);\n      }\n    };\n    fetchRecommend();\n  }, [id, type, API_Key]);\n\n  return (\n    <div className=\"film-detail\">\n      <FilmCast castData={castData} />\n      <FilmFact\n        type={type}\n        filmData={filmData}\n        externalIdData={externalIdData}\n      />\n      <FilmRecommend filmRecommend={filmRecommend} />\n    </div>\n  );\n}\n\nexport default FilmDetail;\n"]},"metadata":{},"sourceType":"module"}